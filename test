import { ethers, upgrades } from "hardhat";
import { expect } from "chai";

import { Box__factory, Box as BoxContract } from "../types";

let box: BoxContract;

// Start test block
describe("Box (proxy)", function () {
  beforeEach(async function () {
    const signer = await ethers.getSigners();
    const Box = new Box__factory(signer[0]);

    box = <BoxContract>(
      await upgrades.deployProxy(Box, [42], { initializer: "store" })
    );
    await box.deployed();

    console.log("Box deployed to:", box.address);
  });

  // Test case
  it("retrieve returns a value previously initialized", async function () {
    // Test if the returned value is the same one
    // Note that we need to use strings to compare the 256 bit integers
    expect((await box.retrieve()).toString()).to.equal("42");
  });
});

import { ethers } from "hardhat";
import { expect } from "chai";

import { Box__factory, Box as BoxContract } from "../types";

let box: BoxContract;

// Start test block
describe("Box", function () {
  beforeEach(async function () {
    const signer = await ethers.getSigners();
    const Box = await new Box__factory(signer[0]);

    box = await Box.deploy();
    await box.deployed();
  });

  // Test case
  it("retrieve returns a value previously stored", async function () {
    // Store a value
    await box.store(42);

    // Test if the returned value is the same one
    // Note that we need to use strings to compare the 256 bit integers
    expect((await box.retrieve()).toString()).to.equal("42");
  });
});

import { ethers, waffle, web3 } from "hardhat";
import { SignerWithAddress } from "@nomiclabs/hardhat-ethers/dist/src/signer-with-address";

const { deployMockContract } = waffle;
import { expect } from "chai";

import {
  Comptroller__factory,
  Comptroller as ComptrollerContract,
  Escrow__factory,
  Escrow as EscrowContract,
} from "../types";

import LinkTokenABI from "@chainlink/contracts/abi/v0.4/LinkTokenInterface.json";

let comptroller: ComptrollerContract;
let escrow: EscrowContract;

let admin: SignerWithAddress;
let owner: SignerWithAddress;
let buyer: SignerWithAddress;
let oracle: SignerWithAddress;

describe("Comptroller", function () {
  beforeEach(async function () {
    [admin, owner, buyer, oracle] = await ethers.getSigners();

    const mockLink = await deployMockContract(
      admin,
      LinkTokenABI.compilerOutput.abi,
    );
    await mockLink.mock.balanceOf.returns(ethers.utils.parseEther("999999"));
    await mockLink.mock.transferAndCall.returns(true);
    //const mockOracle = await deployMockContract(admin, OracleABI);

    const Comptroller = new Comptroller__factory(admin);

    comptroller = await Comptroller.deploy(
      mockLink.address,
      oracle.address,
      web3.utils.toHex("0d69f6d174a4446c9a7ffa21cd0f687c"),
    );

    const Escrow = new Escrow__factory(admin);

    escrow = await Escrow.deploy(
      owner.address,
      comptroller.address,
      "seller@upi",
    );
    escrow = escrow.connect(owner);
  });

  it("should correctly create a fiat payment request", async function () {
    // Deposit funds in the escrow
    await owner.sendTransaction({
      to: escrow.address,
      value: ethers.utils.parseEther("10"),
    });

    await expect(
      comptroller.requestFiatPayment(
        escrow.address,
        buyer.address,
        ethers.utils.parseEther("1"),
        "test@upi",
      ),
    )
      .to.emit(escrow, "AmountLocked")
      .withArgs(escrow.address, ethers.utils.parseEther("1.0049"));
  });

  it("should not revert when calling createFiatPaymentWithLinkRequest", async function () {
    await expect(
      comptroller.createFiatPaymentWithLinkRequest(
        escrow.address,
        buyer.address,
        ethers.utils.parseEther("1"),
        "test@upi",
      ),
    ).to.be.not.reverted;
  });

  it("should not allow just anyone to call requestFiatPaymentWithLink", async function () {
    await expect(
      comptroller.requestFiatPaymentWithLink(
        escrow.address,
        buyer.address,
        ethers.utils.parseEther("1"),
        "test@upi",
      ),
    ).to.be.reverted;
  });

  it("should fail requestFiatPayment when escrow doesn't have enough funds", async function () {
    await expect(
      comptroller.requestFiatPayment(
        escrow.address,
        buyer.address,
        ethers.utils.parseEther("1"),
        "test@upi",
      ),
    ).to.be.revertedWith("Comptroller: not enough funds in escrow");
  });

  it("should fail requestFiatPayment with Status.FINALIZE_ONLY", async function () {
    // Deposit funds in the escrow
    await owner.sendTransaction({
      to: escrow.address,
      value: ethers.utils.parseEther("10"),
    });

    // Change status
    await expect(comptroller.setStatus(2), "setStatus")
      .to.emit(comptroller, "StatusChanged")
      .withArgs(3, 2);

    await expect(
      comptroller.requestFiatPayment(
        escrow.address,
        buyer.address,
        ethers.utils.parseEther("1"),
        "test@upi",
      ),
    ).to.be.revertedWith("invalid contract status");
  });

  describe("withdrawFees", function () {
    let hash: string;

    beforeEach(async function () {
      const amount = ethers.utils.parseEther("10");
      await owner.sendTransaction({
        to: escrow.address,
        value: amount,
      });
      expect(await escrow.getUnlockedBalance(), "balance [initial]").to.equal(
        amount,
      );

      // create a payment request
      await expect(
        comptroller.requestFiatPayment(
          escrow.address,
          buyer.address,
          ethers.utils.parseEther("1"),
          "test@upi",
        ),
      )
        .to.emit(escrow, "AmountLocked")
        .withArgs(escrow.address, ethers.utils.parseEther("1.0049"));

      expect(
        await web3.eth.getBalance(comptroller.address),
        "fees [initial]",
      ).to.equal("0");

      hash = web3.utils.soliditySha3(
        { t: "address", v: comptroller.address },
        { t: "uint256", v: 1 },
      ) as string;
    });

    it("should be able to accept fees from escrow", async function () {
      // complete a successful payment
      await expect(
        escrow.connect(oracle).fulfillFiatPayment(hash, true),
        "fulfillFiatPayment",
      ).to.be.not.reverted;

      expect(
        await web3.eth.getBalance(comptroller.address),
        "fees [final]",
      ).to.equal(ethers.utils.parseEther("0.0049"));
    });

    it("can withdraw fees successfully", async function () {
      // complete a successful payment
      await expect(
        escrow.connect(oracle).fulfillFiatPayment(hash, true),
        "fulfillFiatPayment",
      ).to.be.not.reverted;

      expect(
        await web3.eth.getBalance(comptroller.address),
        "fees [final]",
      ).to.equal(ethers.utils.parseEther("0.0049"));

      // withdraw fees
      await expect(
        comptroller.withdrawFees(
          admin.address,
          ethers.utils.parseEther("0.0049"),
        ),
        "withdrawFees",
      ).to.be.not.reverted;
    });

    it("should not allow withdrawing fees with Status.STOPPED", async function () {
      // complete a successful payment
      await expect(
        escrow.connect(oracle).fulfillFiatPayment(hash, true),
        "fulfillFiatPayment",
      ).to.be.not.reverted;

      expect(
        await web3.eth.getBalance(comptroller.address),
        "fees [final]",
      ).to.equal(ethers.utils.parseEther("0.0049"));

      await expect(comptroller.setStatus(0), "setStatus")
        .to.emit(comptroller, "StatusChanged")
        .withArgs(3, 0);

      // withdraw fees
      await expect(
        comptroller.withdrawFees(
          admin.address,
          ethers.utils.parseEther("0.0049"),
        ),
        "withdrawFees",
      ).to.be.revertedWith("invalid contract status");
    });
  });
});

import { ethers } from "hardhat";
import { SignerWithAddress } from "@nomiclabs/hardhat-ethers/dist/src/signer-with-address";

import { expect } from "chai";

import {
  Escrow__factory,
  EscrowFactory__factory,
  EscrowFactory as EscrowFactoryContract,
} from "../types";

let Escrow: Escrow__factory;
let escrowFactory: EscrowFactoryContract;
let admin: SignerWithAddress;
let owner: SignerWithAddress;

describe("Escrow (Factory)", function () {
  beforeEach(async function () {
    [admin, owner] = await ethers.getSigners();
    Escrow = new Escrow__factory(admin);
    const EscrowFactory = new EscrowFactory__factory(admin);

    escrowFactory = await EscrowFactory.deploy(ethers.constants.AddressZero);
  });

  it("should successfully deploy a new proxied escrow", async function () {
    await expect(escrowFactory.newEscrow("seller@upi")).to.emit(
      escrowFactory,
      "Created",
    );
  });

  it("should create and transfer funds to escrow", async function () {
    const amount = ethers.utils.parseEther("1.1");

    await expect(
      escrowFactory.connect(owner).newEscrow("seller@upi", {
        value: amount,
      }),
    ).to.not.be.reverted;

    const escrows = await escrowFactory.getEscrows(owner.address);
    const escrow = Escrow.attach(escrows[0]);

    expect(await escrow.getUnlockedBalance(), "balance").to.equal(amount);
  });
});

import { ethers, waffle, web3 } from "hardhat";
import { SignerWithAddress } from "@nomiclabs/hardhat-ethers/dist/src/signer-with-address";

const { deployMockContract } = waffle;
import { expect } from "chai";

import {
  Comptroller__factory,
  Comptroller as ComptrollerContract,
  Escrow__factory,
  Escrow as EscrowContract,
} from "../types";

import LinkTokenABI from "@chainlink/contracts/abi/v0.4/LinkTokenInterface.json";

let comptroller: ComptrollerContract;
let escrow: EscrowContract;

let admin: SignerWithAddress;
let owner: SignerWithAddress;
let buyer: SignerWithAddress;
let oracle: SignerWithAddress;

describe("Escrow", function () {
  beforeEach(async function () {
    [admin, owner, buyer, oracle] = await ethers.getSigners();

    const mockLink = await deployMockContract(
      admin,
      LinkTokenABI.compilerOutput.abi,
    );
    await mockLink.mock.balanceOf.returns(ethers.utils.parseEther("999999"));
    await mockLink.mock.transferAndCall.returns(true);
    //const mockOracle = await deployMockContract(admin, OracleABI);

    const Comptroller = new Comptroller__factory(admin);

    comptroller = await Comptroller.deploy(
      mockLink.address,
      oracle.address,
      web3.utils.toHex("0d69f6d174a4446c9a7ffa21cd0f687c"),
    );

    const Escrow = new Escrow__factory(admin);

    escrow = await Escrow.deploy(
      owner.address,
      comptroller.address,
      "seller@upi",
    );
    escrow = escrow.connect(owner);
  });

  it("can deposit additional funds to the contract", async function () {
    expect(await escrow.getUnlockedBalance()).to.equal(0);

    const amount = ethers.utils.parseEther("1.0");
    await owner.sendTransaction({
      to: escrow.address,
      value: amount,
    });

    expect(await escrow.getUnlockedBalance()).to.equal(amount);
  });

  it("can withdraw funds from the contract", async function () {
    const amount = ethers.utils.parseEther("1");
    await owner.sendTransaction({
      to: escrow.address,
      value: amount,
    });

    expect(await escrow.getUnlockedBalance()).to.equal(amount);

    await escrow.withdraw(amount, owner.address);
    expect(await escrow.getUnlockedBalance()).to.equal(0);
  });

  describe("fulfillFiatPayment", function () {
    let hash: string;

    beforeEach(async function () {
      const amount = ethers.utils.parseEther("10");
      await owner.sendTransaction({
        to: escrow.address,
        value: amount,
      });
      expect(await escrow.getUnlockedBalance(), "balance [initial]").to.equal(
        amount,
      );

      // create a payment request
      await expect(
        comptroller.requestFiatPayment(
          escrow.address,
          buyer.address,
          ethers.utils.parseEther("1"),
          "test@upi",
        ),
      )
        .to.emit(escrow, "AmountLocked")
        .withArgs(escrow.address, ethers.utils.parseEther("1.0049"));

      hash = web3.utils.soliditySha3(
        { t: "address", v: comptroller.address },
        { t: "uint256", v: 1 },
      ) as string;
    });

    it("should correctly report unlocked balance", async function () {
      expect(
        await escrow.getUnlockedBalance(),
        "Balance after locked",
      ).to.equal(ethers.utils.parseEther("8.9951"));
    });

    it("should not withdraw more that unlocked balance", async function () {
      expect(
        await escrow.getUnlockedBalance(),
        "Balance after locked",
      ).to.equal(ethers.utils.parseEther("8.9951"));

      await expect(
        escrow.withdraw(ethers.utils.parseEther("10"), owner.address),
      ).to.be.reverted;
    });

    it("should correctly unlock funds after a failed fiat payment", async function () {
      // complete a failed payment
      await expect(
        escrow.connect(oracle).fulfillFiatPayment(hash, false),
        "fulfillFiatPayment",
      )
        .to.emit(escrow, "AmountUnlocked")
        .withArgs(escrow.address, ethers.utils.parseEther("1.0049"));

      expect(await escrow.getUnlockedBalance(), "balance [unlocked]").to.equal(
        ethers.utils.parseEther("10"),
      );
    });

    it("should reset internal state after succcessful payment", async function () {
      // complete a successful payment
      await expect(
        escrow.connect(oracle).fulfillFiatPayment(hash, true),
        "fulfillFiatPayment",
      ).to.not.be.reverted;

      expect(await escrow.getUnlockedBalance(), "balance [final]").to.equal(
        ethers.utils.parseEther("8.9951"),
      );
    });
  });
});
